
// The runtime environment this JAR will be deployed to doesn't know what this model depends on.
// So the generated JAR must include its dependencies. (Except `merlin-sdk`, which is marked `compileTimeApi` by
// `merlin-framework`, so that the runtime system and model JAR can agree on the same interfaces.)
jar {
  from {
    configurations.runtimeClasspath.filter{ it.exists() }.collect{ it.isDirectory() ? it : zipTree(it) }
  } {
    exclude 'META-INF/LICENSE.txt', 'META-INF/LICENSE', 'META-INF/NOTICE.txt', 'META-INF/NOTICE', 'META-INF/versions/11/module-info.class', 'META-INF/versions/**/*.class'
  }
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.named('test') {
  useJUnitPlatform()
}

dependencies {
  implementation project(':model')
  testImplementation project(':model')
  implementation files("../model/build/libs/model.jar")
  testImplementation files("../model/build/libs/model.jar")
}
